name: CICD By DevOps Shack

on:
  push:
    branches: [ "main" ]

jobs:
  build:
    runs-on: self-hosted

    steps:
      # Checkout the repo
      - name: Checkout repository
        uses: actions/checkout@v3

      # Set up JDK 17
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      # Build Maven project
      - name: Build with Maven
        run: mvn package

      # Upload artifact
      - name: Upload Maven artifact
        uses: actions/upload-artifact@v4
        with:
          name: my-artifact
          path: target/*.jar

      # Trivy FS Scan
      - name: Trivy FS Scan
        run: trivy fs --format table -o trivy-fs-report.html .

      # SonarQube scan
      - name: SonarQube Scan
        uses: sonarsource/sonarqube-scan-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

      # Install jq for quality gate
      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      # SonarQube Quality Gate
      - name: SonarQube Quality Gate Check
        id: sonarqube-quality-gate-check
        uses: sonarsource/sonarqube-quality-gate-action@master
        timeout-minutes: 5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

      # Set up QEMU for multi-arch builds
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      # Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Build Docker image
      - name: Build Docker Image
        run: docker build -t adijaiswal/boardgame:latest .

      # Trivy Image Scan
      - name: Trivy Image Scan
        run: trivy image --format table -o trivy-image-report.html adijaiswal/boardgame:latest

      # Docker login
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Push Docker image
      - name: Push Docker Image
        run: docker push adijaiswal/boardgame:latest

      # Kubernetes deployment
      - name: Kubectl Apply Deployment
        run: |
          kubectl apply -f deployment-service.yaml -n webapps
          kubectl get svc -n webapps

